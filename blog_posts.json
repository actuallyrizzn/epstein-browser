[
  {
    "id": 1,
    "title": "Welcome to the Epstein Documents Browser",
    "slug": "welcome-to-epstein-documents-browser",
    "date": "2025-09-06",
    "excerpt": "A comprehensive overview of the open-source document management system we've built for browsing congressional records and documents.",
    "content": "## Project Overview\n\nWelcome to the **Epstein Documents Browser** - an open-source document management system designed to make congressional records and documents easily accessible and searchable. This project serves as a reference implementation for document processing and OCR capabilities.\n\n## What We've Built\n\n### Core Features\n- **Document Indexing**: Automated scanning and indexing of image files with metadata extraction\n- **OCR Processing**: Advanced optical character recognition using Tesseract for text extraction\n- **Web Interface**: Clean, responsive Bootstrap-based UI for document browsing\n- **Search Capabilities**: Full-text search through extracted OCR content\n- **Navigation**: Sequential document browsing with keyboard shortcuts\n\n### Technical Implementation\n- **Backend**: Flask web framework with SQLite database\n- **OCR Engine**: Tesseract for memory-efficient text extraction\n- **Database**: SQLite with proper schema management and idempotent operations\n- **Process Management**: Screen-based background processing for indexing and OCR\n- **Production Ready**: Robust error handling and production environment protocols\n\n### Key Technical Achievements\n\n#### Idempotent Operations\nBoth the image indexer and OCR processor are designed to be idempotent, meaning they can be safely re-run without losing progress or corrupting data. This is crucial for production environments where files are continuously being uploaded.\n\n#### Dynamic Navigation\nImplemented smart navigation that automatically adapts to the actual document range in the database, ensuring users always start with the first available document.\n\n#### Memory Optimization\nSwitched from memory-intensive EasyOCR to lightweight Tesseract to handle large document collections efficiently.\n\n#### SEO & Social Integration\nAdded comprehensive SEO meta tags, Open Graph, Twitter Cards, and Schema.org structured data for better social media sharing and search engine indexing.\n\n### Project Structure\n\n```\nepstein-browser/\n├── app.py                 # Main Flask application\n├── index_images.py        # Idempotent image indexer\n├── ocr_processor_lite.py  # Lightweight OCR processor\n├── start_app.sh          # Web server management\n├── start_ocr.sh          # OCR process management\n├── templates/            # Jinja2 templates\n├── static/              # CSS, JS, images\n└── images.db            # SQLite database\n```\n\n### Getting Started\n\nThis is a **reference implementation** of the public repository at [github.com/actuallyrizzn/epstein-browser](https://github.com/actuallyrizzn/epstein-browser). The codebase demonstrates best practices for:\n\n- Document processing pipelines\n- OCR integration\n- Web application development\n- Production deployment\n- Database management\n\n### What's Next\n\nWe're continuously improving the system with:\n- Enhanced OCR accuracy\n- Better search algorithms\n- Performance optimizations\n- Additional document formats\n\nStay tuned for updates as we continue to develop this open-source document management platform!\n\n---\n\n*This project is developed by [Mark Rizzn Hopkins](https://rizzn.net) as part of the open-source community effort to make government documents more accessible.*",
    "author": "Mark Rizzn Hopkins",
    "tags": ["announcement", "features", "technical", "open-source"]
  }
]
