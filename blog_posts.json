[
  {
    "id": 2,
    "title": "Enhanced Search with Text Excerpts and Context",
    "slug": "enhanced-search-with-text-excerpts",
    "date": "2025-09-06",
    "excerpt": "Major search improvements including text excerpts, context highlighting, and robust error handling for better document discovery.",
    "content": "## Search Enhancement Update\n\nWe've significantly improved the search functionality in the Epstein Documents Browser with several key enhancements that make finding relevant documents much easier and more intuitive.\n\n## What's New\n\n![Enhanced Search Interface](/data/screenshots/search_page.png)\n*The improved search interface with text excerpts and context highlighting*\n\n### Text Excerpts with Context\nOne of the most requested features - search results now show **text excerpts** around the matching content, giving users immediate context about why a document matched their search.\n\n**Features:**\n- **50-character context** before and after each match\n- **Ellipsis indicators** (\"...\") when text is truncated\n- **Search term highlighting** in excerpts\n- **Smart positioning** to show the most relevant context\n\n### Improved Search Reliability\nFixed critical SQL binding errors that were causing search failures and implemented robust error handling.\n\n**Technical Improvements:**\n- **Fixed SQL parameter binding** issues\n- **Added comprehensive error handling** with detailed error messages\n- **Simplified OCR search queries** for better performance\n- **Proper parameter extraction** to prevent binding conflicts\n\n### Enhanced User Experience\nSearch results now provide much more information at a glance, making it easier to identify relevant documents.\n\n**UI Enhancements:**\n- **Contextual excerpts** displayed below file information\n- **Highlighted search terms** using Bootstrap's `<mark>` styling\n- **Match type indicators** (Filename vs Content matches)\n- **Responsive design** that works on all screen sizes\n\n## Example Search Results\n\nWhen searching for \"juror\", you now see:\n\n```\nFile: DOJ-OGR-00000008.jpg [Content]\nPath: Prod 01_20250822/VOL00001/IMAGES/IMAGES001\nExcerpt: ...-1, 09/17/2024, 3634097 , Page7 of 26 prospective jurors completed a lengthy questionnaire, with several ...\n```\n\nThis gives users immediate context about why the document matched their search, making it much easier to find the most relevant information.\n\n## Technical Implementation\n\n### Backend Changes\n- **Context extraction** with 50-character windows around matches\n- **Smart ellipsis handling** for truncated text\n- **Match position tracking** for future enhancements\n- **Error handling** with detailed JSON error responses\n\n### Frontend Changes\n- **Dynamic excerpt rendering** with search term highlighting\n- **Bootstrap styling** for consistent appearance\n- **Responsive layout** that works on mobile and desktop\n- **JavaScript regex highlighting** for case-insensitive matches\n\n### Database Optimization\n- **Simplified OCR search queries** for better performance\n- **Proper parameter binding** to prevent SQL errors\n- **Efficient text file reading** with error handling\n\n## Production Monitoring\n\nWe've also added **automatic server monitoring** with crontab:\n\n- **Every 5 minutes** the system checks if the server is running\n- **Automatic restart** if the server goes down\n- **Logging** of all monitoring activity\n- **Idempotent startup** that won't interfere with running processes\n\n## Performance Impact\n\nThese improvements maintain excellent performance:\n- **Fast search responses** with optimized queries\n- **Efficient text processing** with minimal memory usage\n- **Smart caching** of search results\n- **Background processing** that doesn't block the UI\n\n## What's Next\n\nWe're continuing to improve the search experience with:\n- **Fuzzy search** capabilities for better matching\n- **Search suggestions** and autocomplete\n- **Advanced filtering** options\n- **Search analytics** and usage tracking\n\n## Stay Updated\n\n![Project Blog Interface](/data/screenshots/blog_page.png)\n*Follow our project blog for the latest updates and feature announcements*\n\nKeep up with the latest developments:\n- **Feature announcements** and technical updates\n- **Performance improvements** and optimizations\n- **Behind-the-scenes** development insights\n- **Community feedback** and contributions\n- **RSS feed** for automatic updates\n\n## Try It Out\n\nVisit the [search page](/) and try searching for terms like:\n- \"juror\" - See court-related documents\n- \"testimony\" - Find witness statements\n- \"DOJ\" - Browse Department of Justice documents\n\nEach result now shows you exactly where your search term appears in the document, making it much easier to find the information you're looking for.\n\n---\n\n*These search enhancements are part of our ongoing commitment to making government documents more accessible and searchable. The improvements are now live in production and ready for use.*",
    "author": "Mark Rizzn Hopkins",
    "tags": ["search", "features", "technical", "update"]
  },
  {
    "id": 1,
    "title": "Welcome to the Epstein Documents Browser",
    "slug": "welcome-to-epstein-documents-browser",
    "date": "2025-09-06",
    "excerpt": "A comprehensive overview of the open-source document management system we've built for browsing congressional records and documents.",
    "content": "## Project Overview\n\nWelcome to the **Epstein Documents Browser** - an open-source document management system designed to make congressional records and documents easily accessible and searchable. This project serves as a reference implementation for document processing and OCR capabilities.\n\n## What We've Built\n\n![Epstein Documents Browser Homepage](/data/screenshots/homepage.png)\n*The main homepage showing the document browser interface*\n\n### Core Features\n- **Document Indexing**: Automated scanning and indexing of image files with metadata extraction\n- **OCR Processing**: Advanced optical character recognition using Tesseract for text extraction\n- **Web Interface**: Clean, responsive Bootstrap-based UI for document browsing\n- **Search Capabilities**: Full-text search through extracted OCR content\n- **Navigation**: Sequential document browsing with keyboard shortcuts\n\n### Technical Implementation\n- **Backend**: Flask web framework with SQLite database\n- **OCR Engine**: Tesseract for memory-efficient text extraction\n- **Database**: SQLite with proper schema management and idempotent operations\n- **Process Management**: Screen-based background processing for indexing and OCR\n- **Production Ready**: Robust error handling and production environment protocols\n\n![Document Viewer Interface](/data/screenshots/document_viewer.png)\n*The document viewer showing OCR text extraction and navigation controls*\n\n### Documentation and Support\n\n![Help and Documentation Page](/data/screenshots/help_page.png)\n*Comprehensive help page with usage instructions and keyboard shortcuts*\n\nThe system includes extensive documentation and help features:\n- **Interactive help page** with detailed usage instructions\n- **Keyboard shortcuts** for power users\n- **FAQ section** addressing common questions\n- **Technical documentation** for developers\n- **User guides** for different skill levels\n\n### Project Blog and Updates\n\n![Project Blog Interface](/data/screenshots/blog_page.png)\n*The project blog showcasing updates, features, and technical insights*\n\nStay informed about the latest developments through our project blog:\n- **Feature announcements** and technical updates\n- **Behind-the-scenes** development insights\n- **Performance improvements** and optimizations\n- **Community contributions** and feedback\n- **RSS feed** for automatic updates\n\n### Key Technical Achievements\n\n#### Idempotent Operations\nBoth the image indexer and OCR processor are designed to be idempotent, meaning they can be safely re-run without losing progress or corrupting data. This is crucial for production environments where files are continuously being uploaded.\n\n#### Dynamic Navigation\nImplemented smart navigation that automatically adapts to the actual document range in the database, ensuring users always start with the first available document.\n\n#### Memory Optimization\nSwitched from memory-intensive EasyOCR to lightweight Tesseract to handle large document collections efficiently.\n\n#### SEO & Social Integration\nAdded comprehensive SEO meta tags, Open Graph, Twitter Cards, and Schema.org structured data for better social media sharing and search engine indexing.\n\n### Project Structure\n\n```\nepstein-browser/\n├── app.py                 # Main Flask application\n├── index_images.py        # Idempotent image indexer\n├── ocr_processor_lite.py  # Lightweight OCR processor\n├── start_app.sh          # Web server management\n├── start_ocr.sh          # OCR process management\n├── templates/            # Jinja2 templates\n├── static/              # CSS, JS, images\n└── images.db            # SQLite database\n```\n\n### Getting Started\n\nThis is a **reference implementation** of the public repository at [github.com/actuallyrizzn/epstein-browser](https://github.com/actuallyrizzn/epstein-browser). The codebase demonstrates best practices for:\n\n- Document processing pipelines\n- OCR integration\n- Web application development\n- Production deployment\n- Database management\n\n### What's Next\n\nWe're continuously improving the system with:\n- Enhanced OCR accuracy\n- Better search algorithms\n- Performance optimizations\n- Additional document formats\n\nStay tuned for updates as we continue to develop this open-source document management platform!\n\n---\n\n*This project is developed by [Mark Rizzn Hopkins](https://rizzn.net) as part of the open-source community effort to make government documents more accessible.*",
    "author": "Mark Rizzn Hopkins",
    "tags": ["announcement", "features", "technical", "open-source"]
  }
]
